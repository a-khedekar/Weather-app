{"version":3,"sources":["Components/Weathercard.js","Components/Header.js","Components/Maincontainer.js","App.js","reportWebVitals.js","index.js"],"names":["Weathercard","props","className","apidata","weather","weatherType","main","console","log","toLowerCase","includes","name","style","paddingTop","paddingBottom","fontSize","Math","round","tConverter","convert","temp","unit","Kelvin","Celcius","feels_like","src","icon","Header","placeholder","onKeyPress","e","key","onSearchHandler","onChange","onCityHandler","type","required","onClick","Maincontainer","useState","weatherData","setWeatherData","cityName","setCityName","city","target","value","fetch","then","response","json","data","cod","alert","_","isEmpty","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAyCeA,MArCf,SAAqBC,GAgBjB,OACI,8BACI,sBAAKC,UAAW,sBAAwBD,EAAME,QAAQC,SAhBzCC,EAgB+DJ,EAAME,QAAQC,QAAQ,GAAGE,KAfzGC,QAAQC,IAAI,cAAeH,GACvBA,EAAYI,cAAcC,SAAS,SAC5B,SACAL,EAAYI,cAAcC,SAAS,QACnC,QACAL,EAAYI,cAAcC,SAAS,QACnC,QACAL,EAAYI,cAAcC,SAAS,SACnC,QACK,WAMiG,IAA7G,UACI,sBAAKR,UAAU,cAAf,UACI,sBAAMA,UAAU,UAAhB,SAA2BD,EAAME,QAAQQ,OACzC,sBAAMT,UAAU,UAAhB,SAA2BD,EAAME,QAAQC,QAAQ,GAAGE,OACpD,uBAAMM,MAAO,CAAEC,WAAY,OAAQC,cAAe,OAAQC,SAAU,QAApE,UAAgFC,KAAKC,MAAMC,IAAWC,QAAQlB,EAAME,QAAQG,KAAKc,KAAMF,IAAWG,KAAKC,OAAQJ,IAAWG,KAAKE,UAA/K,cACA,+CAAmBP,KAAKC,MAAMC,IAAWC,QAAQlB,EAAME,QAAQG,KAAKkB,WAAYN,IAAWG,KAAKC,OAAQJ,IAAWG,KAAKE,UAAxH,iBAGJ,qBAAKrB,UAAU,UAAf,SACI,qBAAKA,UAAU,SAASuB,IAAG,2CAAsCxB,EAAME,QAAQC,QAAQ,GAAGsB,KAA/D,oBAzB3C,IAAqBrB,GCcVsB,MAhBf,SAAgB1B,GAOZ,OACI,sBAAKC,UAAU,kBAAf,UACI,uBAAOA,UAAU,cAAc0B,YAAY,sBAAsBC,WARhD,SAACC,GACR,UAAVA,EAAEC,KACF9B,EAAM+B,mBAMyFC,SAAUhC,EAAMiC,cAAeC,KAAK,OAAOC,UAAQ,IAClJ,wBAAQlC,UAAU,eAAemC,QAASpC,EAAM+B,gBAAhD,oBACA,0B,gBC+BGM,MAxCf,WAEI,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACAlC,QAAQC,IAAI,QAASgC,GACrB,MAAgCD,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KA4BA,OACI,sBAAKzC,UAAU,iBAAf,UACI,cAAC,EAAD,CAAQgC,cA5BI,SAACJ,GACjB,IAAMc,EAAOd,EAAEe,OAAOC,MACtBvC,QAAQC,IAAIoC,GACZD,EAAYC,IAyB4BZ,gBArB5C,WACiB,KAAbU,GAAmBK,MAAM,qDAAD,OAAsDL,EAAtD,4CACnBM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF5C,QAAQC,IAAI2C,GACK,QAAbA,EAAKC,IACLC,MAAM,oBAENZ,EAAeU,UAcrBG,IAAEC,QAAQf,IAAgB,cAAC,EAAD,CAAarC,QAASqC,QC3B/CgB,MAVf,WAEE,OACE,8BAEE,cAAC,EAAD,OCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.37faa1b6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport tConverter from '@khanisak/temperature-converter'\nimport '../App.css'\n\nfunction Weathercard(props) {\n\n    function imageSwitch(weatherType) {\n        console.log(\"weatherType\", weatherType)\n        if (weatherType.toLowerCase().includes(\"cloud\")) {\n            return \"cloudy\";\n        } else if (weatherType.toLowerCase().includes(\"rain\")) {\n            return \"rainy\";\n        } else if (weatherType.toLowerCase().includes(\"wind\")) {\n            return \"windy\";\n        } else if (weatherType.toLowerCase().includes(\"clear\")) {\n            return \"clear\";\n        } else { return \"default\"; }\n\n    }\n\n    return (\n        <div >\n            <div className={\"container maindiv \" + (props.apidata.weather ? imageSwitch(props.apidata.weather[0].main) : '')} >\n                <div className=\"weatherinfo\">\n                    <span className=\"cityCss\">{props.apidata.name}</span>\n                    <span className=\"mainCss\">{props.apidata.weather[0].main}</span>\n                    <span style={{ paddingTop: \"10px\", paddingBottom: \"10px\", fontSize: \"40px\" }}>{(Math.round(tConverter.convert(props.apidata.main.temp, tConverter.unit.Kelvin, tConverter.unit.Celcius)))}{`\\xB0`}C</span>\n                    <span>Feels like {(Math.round(tConverter.convert(props.apidata.main.feels_like, tConverter.unit.Kelvin, tConverter.unit.Celcius)))}{`\\xB0`}C</span>\n\n                </div>\n                <div className=\"forIcon\">\n                    <img className=\"imgCss\" src={`http://openweathermap.org/img/wn/${props.apidata.weather[0].icon}@4x.png`}></img>\n                </div>\n            </div>\n\n        </div>\n\n\n    )\n\n}\nexport default Weathercard;","import React from \"react\"\nimport '../App.css'\n\n\nfunction Header(props) {\n    const handleLoginKeyUp = (e) => {\n        if (e.key === 'Enter') {\n            props.onSearchHandler();\n        }\n    }\n\n    return (\n        <div className=\"searchContainer\">\n            <input className=\"searchInput\" placeholder=\"Enter the City name\" onKeyPress={handleLoginKeyUp} onChange={props.onCityHandler} type=\"text\" required />\n            <button className=\"searchButton\" onClick={props.onSearchHandler}>Search</button>\n            <p></p>\n        </div>\n    )\n\n}\nexport default Header;","import React, { useState, useEffect } from \"react\";\nimport Weathercard from \"./Weathercard\"\nimport Header from \"./Header\"\nimport _ from 'lodash';\nimport \"../App.css\"\n\nfunction Maincontainer() {\n\n    const [weatherData, setWeatherData] = useState({});\n    console.log('state', weatherData);\n    const [cityName, setCityName] = useState(\"\");\n\n    const cityHandler = (e) => {\n        const city = e.target.value;\n        console.log(city);\n        setCityName(city);\n    }\n\n\n    function fetchApi() {\n        cityName !== \"\" && fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=65be9299e69214eeae8e45289fef144b`)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n                if (data.cod === '404') {\n                    alert(\"City not found!!\")\n                } else {\n                    setWeatherData(data)\n                }\n\n\n            });\n    }\n\n    // useEffect(() => {\n    //     fetchApi();\n    // }, [])\n\n    return (\n        <div className=\"Centralization\">\n            <Header onCityHandler={cityHandler} onSearchHandler={fetchApi} />\n            {!_.isEmpty(weatherData) && <Weathercard apidata={weatherData} />}\n        </div>\n    )\n\n}\nexport default Maincontainer;","import { useState } from 'react';\nimport './App.css';\nimport Maincontainer from \"./Components/Maincontainer\";\n\nfunction App() {\n\n  return (\n    <div>\n\n      <Maincontainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}